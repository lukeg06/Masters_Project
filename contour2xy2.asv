function [coordinates_out] = contour2xy2(contourImage,reverse)

% This function funtion takes an image with a single contour in the image
% as the input and return the coordinates of each pixel in the contour. The
% algrothim follows the pixels from the start point to the end point of the
% contour. The start point is taken as the point nearest the top left of
% the image.
%
%[coordinates_out] = contour2xy2(contourImage,reverse)
%
%Inputs,
%       contourImage: Binary input image. Must contain only a single contour two limb ends. 
%
%      reverse = Should the contour be traversed in reverse order ['true'/'false'] 
%Outputs,
%       Output: Returns an output object.
%
%       Output.ALLocation: Coordinates of left and right alares in mm. Size
%       = [2,2]. [Left AL;Right AL]
%
%       Output.errors: Indicates wheter there has been an error in the
%       detection of one of the points. [0 0] = no error. [0 1] = right
%       error. [1 0] = left error.
%

if exist('reverse','var')
    if ~or(strcmp(reverse,'true'),strcmp(reverse,'false'))
        reverse = 'false';
    end
else
    reverse = 'false';
end
contourImagecp= contourImage;
[imageLimbEnds] = (vsg('LimbEnds',uint8(contourImage)*255))./255;

% Seach for [0 0 0
%            0 1 0
%            1 0 1]
% and rotational varients which could lead to false detection of limb ends.

a = [0 0 0;0 1 0;1 0 1];
b0 = imerode(double(contourImage),a);
b90 = imerode(double(contourImage),rot90(a,1));
b180 = imerode(double(contourImage),rot90(a,2));
b270 = imerode(double(contourImage),rot90(a,3));


b = b0|b90|b180|b270;
c = and(imageLimbEnds,b);


imageLimbEnds = xor(c,imageLimbEnds);

%%
d = [0 1 0;1 1 0;0 0 0];
e0 = imerode(double(contourImage),d);
e90 = imerode(double(contourImage),rot90(d,1));
e180 = imerode(double(contourImage),rot90(d,2));
e270 = imerode(double(contourImage),rot90(d,3));


e = e0|e90|e180|e270;
contourImage = xor(e,contourImage);

%Previous step may in a very small number of cases produce a new branch.
[imageLimbEnds2] = (vsg('LimbEnds',uint8(contourImage)*255))./255;
noNewLimbEnds = sum(imageLimbEnds2(:));
for i = 1:noNewLimbEnds
    
    [p_a] = vsg('FWP',imageLimbEnds2.*255);
    
    points_a(1,i) = p_a(1)+1;
    points_a(2,i) = p_a(2)+1;
    imageLimbEnds2(points_a(2,i),points_a(1,i)) = 0;
    
end

% Check to see that contour is valid
if(sum(imageLimbEnds(:)) ~= 2)
    
    coordinates_out = 0;
    return;
end

%% Find start and end point coordinates

[p1] = vsg('FWP',imageLimbEnds.*255);
p1(1) = p1(1)+1;
p1(2) = p1(2)+1;
temp = imageLimbEnds.*255;
temp(p1(2),p1(1)) = 0;
[p2] =  vsg('FWP',temp);
p2(1) = p2(1)+1;
p2(2) = p2(2)+1;

pts = [p1,p2];
pts_sorted= sortrows(pts',1)';

startPt = pts_sorted(:,2);
endPt = pts_sorted(:,1);

currentPt = startPt;
contourImage(currentPt(2),currentPt(1)) = 0;

found = 0;

coordinates(1,:)= startPt';
k = 2;

while ~isequal(currentPt,endPt)
    for j = -1:1
        for i = -1:1
            testPt = [currentPt(1)+i;currentPt(2)+j];
            
            if (contourImage(testPt(2),testPt(1)) == 1)
                nextPt = testPt;
                found = 1;
                break;
            end
            
        end
        if found == 1
            
            break;
        end
        
    end
    %% What to do if point found
    if found == 1
        currentPt = nextPt;
        coordinates(k,:)= nextPt';
        k = k+1;
        contourImage(testPt(2),testPt(1)) = 0;
        found = 0;
        
        
    else
        for i = 1:noNewLimbEnds
            if isequal(points_a(:,i),currentPt)
                coordinates(k,:)= currentPt';
                found2 = 1;
                break;
            end
        end
        if found2 == 1
            break;
        else
            error('Luke');
            coordinates_out = 0;
            return;
        end
    end
end


%Swap x and y and reverse order

if strcmp(reverse,'true')
    coordinates_out = [coordinates(end-1:-1:1,2),coordinates(end-1:-1:1,1)];
else
    
    coordinates_out = [coordinates(:,2),coordinates(:,1)];
end







